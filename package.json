{
  "name": "meteor-blaze-vscode-language-server",
  "displayName": "Meteor/Blaze HTML Language Server",
  "description": "A language server for the Meteor framework providing syntax highlighting, diagnostics, and code completion",
  "version": "0.0.7",
  "publisher": "ptbarnum4",
  "author": "ptbarnum4",
  "license": "MIT",
  "homepage": "https://github.com/ptbarnum4/meteor-blaze-vscode-language-server#readme",
  "repository": {
    "type": "git",
    "url": "https://github.com/ptbarnum4/meteor-blaze-vscode-language-server.git"
  },
  "bugs": {
    "url": "https://github.com/ptbarnum4/meteor-blaze-vscode-language-server/issues"
  },
  "keywords": [
    "meteor",
    "blaze",
    "handlebars",
    "template",
    "language-server",
    "vscode",
    "typescript",
    "javascript",
    "html"
  ],
  "engines": {
    "vscode": "^1.104.0"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Other"
  ],
  "icon": "icon.png",
  "activationEvents": [
    "workspaceContains:.meteor"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "languages": [
      {
        "id": "html",
        "aliases": [
          "HTML",
          "html"
        ],
        "extensions": [
          ".html"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "meteor-html",
        "aliases": [
          "Meteor HTML",
          "meteor-html",
          "Meteor",
          "Blaze"
        ],
        "extensions": [],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "meteor-handlebars",
        "aliases": [
          "Meteor Handlebars",
          "meteor-handlebars",
          "Blaze Handlebars"
        ],
        "extensions": [
          ".hbs"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "html",
        "scopeName": "text.html.meteor",
        "path": "./syntaxes/meteor-html.tmLanguage.json",
        "embeddedLanguages": {
          "meta.template.meteor": "html",
          "meta.helper.expression.meteor": "handlebars",
          "meta.helper.block.meteor": "handlebars"
        }
      }
    ],
    "semanticTokenTypes": [
      {
        "id": "delimiter",
        "description": "Blaze expression delimiters {{ and }}",
        "superType": "operator"
      },
      {
        "id": "blazeBlockHash",
        "description": "# in Blaze block helpers",
        "superType": "operator"
      },
      {
        "id": "blazeBlockName",
        "description": "Blaze block helper name (if, each, with, unless)",
        "superType": "keyword"
      },
      {
        "id": "blazeBlockSingleArg",
        "description": "Single argument to a Blaze block helper",
        "superType": "parameter"
      },
      {
        "id": "blazeBlockFirstArg",
        "description": "First argument to a Blaze block helper",
        "superType": "parameter"
      },
      {
        "id": "blazeBlockArgs",
        "description": "Subsequent arguments to a Blaze block helper",
        "superType": "parameter"
      },
      {
        "id": "blazeBlockIn",
        "description": "The 'in' keyword for each/with style blocks",
        "superType": "keyword"
      },
      {
        "id": "blazeExpression",
        "description": "Inline Blaze expression contents",
        "superType": "variable"
      }
    ],
    "commands": [
      {
        "command": "meteor-blaze-vscode-language-server.restart",
        "title": "Restart Meteor/Blaze HTML Language Server"
      }
    ],
    "colors": [
      {
        "id": "blazeBlockHash.defaultColor",
        "description": "Default color for Blaze block hash (#) symbols",
        "defaults": {
          "dark": "#808080",
          "light": "#808080",
          "highContrast": "#808080"
        }
      },
      {
        "id": "blazeBlockName.defaultColor",
        "description": "Default color for Blaze block names (if, each, etc.)",
        "defaults": {
          "dark": "#f177ff",
          "light": "#f177ff",
          "highContrast": "#f177ff"
        }
      },
      {
        "id": "blazeBlockArgs.defaultColor",
        "description": "Default color for Blaze block arguments",
        "defaults": {
          "dark": "#fffec4",
          "light": "#fffec4",
          "highContrast": "#fffec4"
        }
      },
      {
        "id": "blazeBlockFirstArg.defaultColor",
        "description": "Default color for first Blaze block argument",
        "defaults": {
          "dark": "#ffd16f",
          "light": "#ffd16f",
          "highContrast": "#ffd16f"
        }
      },
      {
        "id": "blazeBlockSingleArg.defaultColor",
        "description": "Default color for single Blaze block argument",
        "defaults": {
          "dark": "#ffd16f",
          "light": "#ffd16f",
          "highContrast": "#ffd16f"
        }
      },
      {
        "id": "blazeExpression.defaultColor",
        "description": "Default color for Blaze expressions",
        "defaults": {
          "dark": "#ffd16f",
          "light": "#ffd16f",
          "highContrast": "#ffd16f"
        }
      },
      {
        "id": "blazeBlockIn.defaultColor",
        "description": "Default color for Blaze 'in' keyword",
        "defaults": {
          "dark": "#00ffa2",
          "light": "#00ffa2",
          "highContrast": "#00ffa2"
        }
      },
      {
        "id": "delimiter.defaultColor",
        "description": "Default color for Blaze delimiters",
        "defaults": {
          "dark": "#808080",
          "light": "#808080",
          "highContrast": "#808080"
        }
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Meteor/Blaze HTML Language Server",
      "properties": {
        "meteorLanguageServer.maxNumberOfProblems": {
          "scope": "resource",
          "type": "number",
          "default": 100,
          "description": "Controls the maximum number of problems reported by the server."
        },
        "meteorLanguageServer.trace.server": {
          "scope": "window",
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the language server."
        },
        "meteorLanguageServer.blockConditions": {
          "type": "object",
          "default": {},
          "description": "Settings for inline block condition hints.",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true,
              "description": "Enable inline condition hints for Blaze block helpers ({{/if}}, {{/each}}, etc.)"
            },
            "autoInsertEndTags": {
              "type": "boolean",
              "default": true,
              "description": "Automatically insert closing tags when typing opening Blaze block tags ({{#if}}, {{#each}}, etc.)"
            },
            "color": {
              "type": "string",
              "default": "#727272",
              "description": "Color for inline condition hints. Can be a theme color name or hex color (e.g., '#888888')"
            },
            "fontStyle": {
              "type": "string",
              "enum": [
                "normal",
                "italic",
                "bold"
              ],
              "default": "italic",
              "description": "Font style for inline condition hints"
            },
            "margin": {
              "type": "string",
              "default": "0 0 0 0.75em",
              "description": "CSS margin for inline condition hints"
            },
            "extend": {
              "type": "array",
              "default": [],
              "description": "Extend block condition hints to custom block types. Each entry should be an object with 'type', 'label', and optional 'propNames'. Example: [{ type: 'custom', label: 'custom', propNames: ['foo', 'bar'] }]",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  },
                  "propNames": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional array of prop names for the block type."
                  },
                  "requiresEndTag": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether this block type requires an end tag for validation. Set to true to validate missing end tags."
                  },
                  "autoInsertEndTag": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to automatically insert end tags for this custom block type when typing the opening tag."
                  }
                },
                "required": [
                  "type",
                  "label"
                ]
              }
            }
          }
        },
        "meteorLanguageServer.blazeHelpers": {
          "type": "object",
          "default": {},
          "description": "Settings for Blaze helpers.",
          "properties": {
            "extend": {
              "type": "array",
              "default": [],
              "description": "Extend Blaze helpers for completion and hover. Each entry should be an object with 'name' and 'doc'. Example: [{ name: 'customHelper', doc: 'Custom helper description' }]",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "doc": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "doc"
                ]
              }
            },
            "hashColor": {
              "type": "string",
              "default": "#FF6B35",
              "description": "Custom color for the '#' in Blaze helpers (e.g., #if, #each). Use hex or theme color."
            },
            "nameColor": {
              "type": "string",
              "default": "#007ACC",
              "description": "Custom color for the helper name in Blaze helpers. Use hex or theme color."
            },
            "bracketColor": {
              "type": "string",
              "default": "#888888",
              "description": "Custom color for the brackets '{{' and '}}' in Blaze helpers. Use hex or theme color."
            }
          }
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "dev": "npm run watch",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "clean-attrs": "find . -name '.DS_Store' -delete 2>/dev/null || true",
    "clean-build": "rm -rf dist/ out/ *.vsix",
    "build-fresh": "npm run clean-build && npm run package",
    "package-safe": "npm run clean-attrs && npm run build-fresh && npx @vscode/vsce package --out ./meteor-blaze-vscode-language-server.vsix",
    "install:local": "code --install-extension ./meteor-blaze-vscode-language-server.vsix --force",
    "package:local": "npm run package-safe && npm run install:local",
    "package:vsix": "npm run clean-attrs && npm run package && npx @vscode/vsce package",
    "publish:marketplace": "npm run clean-attrs && npm run package && npx @vscode/vsce publish",
    "publish:patch": "npm run clean-attrs && npm run package && npx @vscode/vsce publish patch",
    "publish:minor": "npm run clean-attrs && npm run package && npx @vscode/vsce publish minor",
    "publish:major": "npm run clean-attrs && npm run package && npx @vscode/vsce publish major",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "node --test out/test/server/**/*.test.js",
    "test-manual": "node out/test/runTest.js"
  },
  "devDependencies": {
    "@eslint/js": "^9.38.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "^24.5.2",
    "@types/vscode": "^1.104.0",
    "@typescript-eslint/eslint-plugin": "^8.0.0",
    "@typescript-eslint/parser": "^8.0.0",
    "@vscode/test-electron": "^2.5.2",
    "esbuild": "^0.25.10",
    "eslint": "^9.0.0",
    "mocha": "^11.7.2",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "glob": "^11.0.3",
    "vscode-languageclient": "^9.0.1",
    "vscode-languageserver": "^9.0.1",
    "vscode-languageserver-textdocument": "^1.0.8"
  }
}
